//------------------------
// AWS Lambda. Ref:
// https://docs.aws.amazon.com/lambda/latest/dg/lambda-dg.pdf
// https://docs.aws.amazon.com/lambda/latest/dg/with-s3-example.html
// https://docs.aws.amazon.com/lambda/latest/dg/getting-started.html
// https://docs.aws.amazon.com/IAM/latest/UserGuide/getting-started_create-admin-group.html
//------------------------
AWS Lambda is a compute service that lets you run code without provisioning or managing servers. AWS Lambda executes 
your code only when needed and scales automatically, from a few requests per day to thousands per second. You pay 
only for the compute time you consume - there is no charge when your code is not running. With AWS Lambda, you can 
run code for virtually any type of application or backend service - all with zero administration. 

AWS Lambda runs your code on a high-availability compute infrastructure and performs all of the administration of 
the compute resources, including server and operating system maintenance, capacity provisioning and automatic scaling,
code monitoring and logging. All you need to do is supply your code in one of the languages that AWS Lambda supports. 

You can use AWS Lambda to run your code in response to events, such as changes to data in an Amazon S3 bucket or an 
Amazon DynamoDB table; to run your code in response to HTTP requests using Amazon API Gateway; or invoke your code 
using API calls made using AWS SDKs. With these capabilities, you can use Lambda to easily build data processing 
triggers for AWS services like Amazon S3 and Amazon DynamoDB, process streaming data stored in Kinesis, or create your 
own back end that operates at AWS for scale, performance, and security. 

You can also build serverless applications composed of functions that are triggered by events and automatically deploy 
them using CodePipeline and AWS CodeBuild. 

AWS Lambda is an ideal compute platform for many application scenarios, provided that you can write your application 
code in languages supported by AWS Lambda, and run within the AWS Lambda standard runtime environment and resources 
provided by Lambda. When using AWS Lambda, you are responsible only for your code. AWS Lambda manages the compute fleet 
that offers a balance of memory, CPU, network, and other resources. 

This is in exchange for flexibility, which means you cannot log in to compute instances, or customize the operating 
system on provided runtimes. These constraints enable AWS Lambda to perform operational and administrative activities 
on your behalf, including provisioning capacity, monitoring fleet health, applying security patches, deploying your 
code, and monitoring and logging your Lambda functions.

If you need to manage your own compute resources, Amazon Web Services also offers other compute services to meet your 
needs.
• Amazon Elastic Compute Cloud (Amazon EC2) service offers flexibility and a wide range of EC2 instance types to choose 
   from. It gives you the option to customize operating systems, network and security settings, and the entire software 
   stack, but you are responsible for provisioning capacity, monitoring fleet health and performance, and using 
   Availability Zones for fault tolerance.
• Elastic Beanstalk offers an easy-to-use service for deploying and scaling applications onto Amazon EC2 in which you 
   retain ownership and full control over the underlying EC2 instances.

To get started with AWS Lambda, use the Lambda console to create a function. In a few minutes, you can create a function, invoke it, and view logs, metrics, and trace data. We would need the following for using AWS Lambda: 
a. an AWS Account  b. AWS Identity and Access Management (IAM) user with administrator permissions

As a best practice, 
a. you should also create an AWS Identity and Access Management (IAM) user with administrator permissions and use that 
   for all work that does not require root credentials.
b. create a password for console access, and access keys to use command line tools. 

As a best practice, do not use the AWS account root user for any task where it's not required. 
Instead, create a new IAM user for each person that requires administrator access. Then make those users administrators 
by placing the users into an "Administrators" group to which you attach the AdministratorAccess managed policy.
Thereafter, the users in the administrators group should set up the groups, users, and so on, for the AWS account. 
All future interaction should be through the AWS account's users and their own keys instead of the root user. 
However, to perform some account and service management tasks, you must log in using the root user credentials. 
To view the tasks that require you to sign in as the root user, see AWS Tasks that Require Account Root User. 

A.Create a IAM role for AWSLambda. 
a.IAM Console > Roles 
b.Common UseCase > Lambda (choose common usecase)
c.Set Permission as AWSLambdaExecute 
d.Tags > Review 
e.Name iam_lambda_execute. 
---
B.Create a function to use the IAM role in Lambda.
a.Function name > S3_processor
b.Code Structure as per AWS Lambda 
c.Permission as created in the IAM role.
d.Setup function.
e.Add Trigger to function (S3)
f.Files uploaded in folder as provided in the S3 object "new_s3_images/".







You can author functions in the Lambda console — or with an IDE toolkit, command line tools, or SDKs. The Lambda console provides a code editor for noncompiled languages that lets you modify and test code quickly. The AWS CLI gives you direct access to the Lambda API for advanced configuration and automation use cases. 

A.Create a Lambda function using the AWS Lambda console.
Next, you manually invoke the Lambda function using sample event data. 
AWS Lambda executes the Lambda function and returns results. 
You then verify execution results, including the logs that your Lambda function created and various CloudWatch metrics. 
a.In AWSLambda Console .. Create Function 
Lambda will create an execution role with permission to upload logs to Amazon CloudWatch Logs. 
You can configure and modify permissions further when you add triggers.

















